// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  password      String?
  role          UserRoles @default(CLIENT)
  emailVerified Boolean?  @default(false)
  enabled       Boolean   @default(true)
  Client        Client?
}

model Client {
  id             Int             @id @default(autoincrement())
  birthDate      DateTime
  phone          String
  cpf            String
  rg             String?
  materialStatus MaterialStatus  @default(Single)
  gender         Gender          @default(MALE)
  RentalRequest  RentalRequest[]
  Rental         Rental[]
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Property {
  id             Int            @id @default(autoincrement())
  title          String         @db.VarChar(255)
  description    String?
  price          Decimal
  size           Decimal?
  bedrooms       Int?
  bathrooms      Int?
  status         PropertyStatus
  propertyTypeId Int?
  propertyType   PropertyType?  @relation(fields: [propertyTypeId], references: [id], onUpdate: Cascade)

  images        PropertyImage[]
  RentalRequest RentalRequest[]
  Rental        Rental[]
  Location      Location?
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id       Int        @id @default(autoincrement())
  name     String
  property Property[]
}

model Location {
  id         Int       @id @default(autoincrement())
  street     String?
  number     String?
  complement String?
  city       String?
  state      String?
  country    String?
  cep        String?
  location   String?
  propertyId Int?      @unique
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model RentalRequest {
  clientId   Int
  propertyId Int
  budget     Decimal
  startDate  DateTime
  endDate    DateTime
  status     RentalRequestStatus @default(Pending)

  client   Client   @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([clientId, propertyId])
}

model Rental {
  id                 Int                  @id @default(autoincrement())
  clientId           Int
  propertyId         Int
  startContractDate  DateTime
  endContractDate    DateTime
  contractUrl        String
  status             RentalStatus         @default(Actived)
  client             Client               @relation(fields: [clientId], references: [id])
  property           Property             @relation(fields: [propertyId], references: [id])
  Payment            Payment[]
  MaintenanceRequest MaintenanceRequest[]
  MaintenanceCost    MaintenanceCost[]
}

model Payment {
  id              Int           @id @default(autoincrement())
  total           Decimal
  startDate       DateTime
  maturityDate    DateTime
  status          PaymentStatus
  paymentMethodId Int
  rentalId        Int

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  rental        Rental        @relation(fields: [rentalId], references: [id])
}

model PaymentMethod {
  id      Int       @id @default(autoincrement())
  name    String
  Payment Payment[]
}

model MaintenanceRequest {
  id                  Int                      @id @default(autoincrement())
  randomRequestNumber Int
  description         String
  status              MaintenanceRequestStatus

  rentalId        Int
  rental          Rental            @relation(fields: [rentalId], references: [id])
  MaintenanceCost MaintenanceCost[]
}

model MaintenanceCost {
  id          Int     @id @default(autoincrement())
  description String
  value       Decimal

  maintenanceRequestId Int
  rentalId             Int

  maintenceRequest MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  rental           Rental             @relation(fields: [rentalId], references: [id])
}

// enums
enum UserRoles {
  ADMIN
  AGENT
  CLIENT
}

enum MaterialStatus {
  Single
  Married
  Divorced
  Widowed
  Separated
  Engaged
}

enum Gender {
  MALE
  FEMALE
}

enum PropertyStatus {
  Available
  Rented
  Under_maintenance
}

enum RentalRequestStatus {
  Pending
  Aproved
  Rejected
}

enum RentalStatus {
  Actived
  Finished
  Canceled
}

enum PaymentStatus {
  Done
  Pending
  Processing
}

enum MaintenanceRequestStatus {
  Pending
  In_progress
  Finished
}
