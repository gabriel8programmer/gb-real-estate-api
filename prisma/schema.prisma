// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Prisma schema for a real estate system using MongoDB

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  password  String
  email     String   @unique
  phone     String?
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Client  Client?
  Rentals Rental[]
}

model Property {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  propertyType String
  location     String
  price        Float
  size         Int?
  numBedrooms  Int?
  numBathrooms Int?
  status       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  images              PropertyImage[]
  rentals             Rental[]
  maintenanceRequests MaintenanceRequest[]
}

model PropertyImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String   @db.ObjectId
  imageUrl   String
  createdAt  DateTime @default(now())

  property Property @relation(fields: [propertyId], references: [id])
}

model Client {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  address     String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  rentals Rental[]
}

model Rental {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String   @db.ObjectId
  clientId   String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  property Property  @relation(fields: [propertyId], references: [id])
  client   Client    @relation(fields: [clientId], references: [id])
  payments Payment[]
  User     User?     @relation(fields: [userId], references: [id])
  userId   String?   @db.ObjectId
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rentalId    String?  @db.ObjectId
  paymentDate DateTime
  amount      Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rental Rental? @relation(fields: [rentalId], references: [id])
}

model MaintenanceRequest {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  propertyId  String    @db.ObjectId
  requestDate DateTime
  description String
  status      String
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  property Property @relation(fields: [propertyId], references: [id])
}
