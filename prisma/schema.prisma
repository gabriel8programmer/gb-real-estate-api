// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(255)
  email         String    @unique @db.VarChar(255)
  password      String?
  role          UserRoles @default(CLIENT)
  emailVerified Boolean   @default(false)
  enabled       Boolean   @default(true)
  picture       String?
  client        Client?
  agent         Agent?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Client {
  id             Int             @id @default(autoincrement())
  birthDate      DateTime
  phone          String
  cpf            String          @unique
  rg             String?
  materialStatus MaterialStatus?
  gender         Gender?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentalRequests RentalRequest[]
  rentals        Rental[]
}

model Agent {
  id             Int             @id @default(autoincrement())
  license        String          @unique
  bio            String?
  phone          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  rentals        Rental[]
  rentalRequests RentalRequest[]
}

model Property {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(255)
  description    String?
  price          Decimal
  size           Decimal?
  bedrooms       Int?
  bathrooms      Int?
  status         PropertyStatus  @default(Available)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  propertyTypeId Int?
  propertyType   PropertyType?   @relation(fields: [propertyTypeId], references: [id], onUpdate: Cascade)
  location       Location?
  images         PropertyImage[]
  rentalRequest  RentalRequest[]
  rental         Rental[]
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  propertyId Int
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id       Int        @id @default(autoincrement())
  name     String
  property Property[]
}

model Location {
  id         Int       @id @default(autoincrement())
  street     String?
  number     String?
  complement String?
  city       String?
  state      String?
  country    String?
  cep        String?
  coords     Json?
  propertyId Int?      @unique
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model RentalRequest {
  id         Int                 @id @default(autoincrement())
  budget     Decimal
  endDate    DateTime
  status     RentalRequestStatus @default(Pending)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  clientId   Int
  propertyId Int
  agentId    Int?
  client     Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property   Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  agent      Agent?              @relation(fields: [agentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Rental {
  id                 Int                  @id @default(autoincrement())
  startContractDate  DateTime
  endContractDate    DateTime
  contractUrl        String
  status             RentalStatus         @default(Actived)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  clientId           Int
  agentId            Int
  propertyId         Int
  client             Client               @relation(fields: [clientId], references: [id])
  agent              Agent                @relation(fields: [agentId], references: [id])
  property           Property             @relation(fields: [propertyId], references: [id])
  Payment            Payment[]
  maintenanceRequest MaintenanceRequest[]
  maintenanceCost    MaintenanceCost[]
}

model Payment {
  id              Int           @id @default(autoincrement())
  total           Decimal
  startDate       DateTime
  maturityDate    DateTime
  status          PaymentStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  rentalId        Int
  paymentMethodId Int
  rental          Rental        @relation(fields: [rentalId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id      Int       @id @default(autoincrement())
  name    String
  payment Payment[]
}

model MaintenanceRequest {
  id                  Int                      @id @default(autoincrement())
  randomRequestNumber Int
  description         String
  status              MaintenanceRequestStatus
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  rentalId            Int
  rental              Rental                   @relation(fields: [rentalId], references: [id])
  maintenanceCost     MaintenanceCost[]
}

model MaintenanceCost {
  id                   Int                @id @default(autoincrement())
  description          String
  value                Decimal
  maintenanceRequestId Int
  rentalId             Int
  maintenceRequest     MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  rental               Rental             @relation(fields: [rentalId], references: [id])
}

// enums
enum UserRoles {
  ADMIN
  AGENT
  CLIENT
}

enum MaterialStatus {
  Single
  Married
  Divorced
  Widowed
  Separated
  Engaged
}

enum Gender {
  MALE
  FEMALE
}

enum PropertyStatus {
  Available
  Rented
  Under_maintenance
}

enum RentalRequestStatus {
  Pending
  Aproved
  Rejected
}

enum RentalStatus {
  Actived
  Finished
  Canceled
}

enum PaymentStatus {
  Done
  Pending
  Processing
}

enum MaintenanceRequestStatus {
  Pending
  In_progress
  Finished
}
